# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  admin: Boolean
  password: PasswordState
  publishedDate: DateTime
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  occupation: Specialist
  jobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
  responses(
    where: ResponseWhereInput! = {}
    orderBy: [ResponseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Response!]
  responsesCount(where: ResponseWhereInput! = {}): Int
  completedOrders(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  completedOrdersCount(where: JobWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  admin: BooleanFilter
  publishedDate: DateTimeNullableFilter
  posts: PostManyRelationFilter
  occupation: SpecialistWhereInput
  jobs: JobManyRelationFilter
  responses: ResponseManyRelationFilter
  completedOrders: JobManyRelationFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input JobManyRelationFilter {
  every: JobWhereInput
  some: JobWhereInput
  none: JobWhereInput
}

input ResponseManyRelationFilter {
  every: ResponseWhereInput
  some: ResponseWhereInput
  none: ResponseWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  admin: OrderDirection
  publishedDate: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  admin: Boolean
  password: String
  publishedDate: DateTime
  posts: PostRelateToManyForUpdateInput
  occupation: SpecialistRelateToOneForUpdateInput
  jobs: JobRelateToManyForUpdateInput
  responses: ResponseRelateToManyForUpdateInput
  completedOrders: JobRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input SpecialistRelateToOneForUpdateInput {
  create: SpecialistCreateInput
  connect: SpecialistWhereUniqueInput
  disconnect: Boolean
}

input JobRelateToManyForUpdateInput {
  disconnect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

input ResponseRelateToManyForUpdateInput {
  disconnect: [ResponseWhereUniqueInput!]
  set: [ResponseWhereUniqueInput!]
  create: [ResponseCreateInput!]
  connect: [ResponseWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  admin: Boolean
  password: String
  publishedDate: DateTime
  posts: PostRelateToManyForCreateInput
  occupation: SpecialistRelateToOneForCreateInput
  jobs: JobRelateToManyForCreateInput
  responses: ResponseRelateToManyForCreateInput
  completedOrders: JobRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input SpecialistRelateToOneForCreateInput {
  create: SpecialistCreateInput
  connect: SpecialistWhereUniqueInput
}

input JobRelateToManyForCreateInput {
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

input ResponseRelateToManyForCreateInput {
  create: [ResponseCreateInput!]
  connect: [ResponseWhereUniqueInput!]
}

type Job {
  id: ID!
  title: String
  description: String
  publishedDate: DateTime
  user: User
  contractor: User
  departments(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  departmentsCount(where: DepartmentWhereInput! = {}): Int
  responses(
    where: ResponseWhereInput! = {}
    orderBy: [ResponseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Response!]
  responsesCount(where: ResponseWhereInput! = {}): Int
}

input JobWhereUniqueInput {
  id: ID
}

input JobWhereInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishedDate: DateTimeNullableFilter
  user: UserWhereInput
  contractor: UserWhereInput
  departments: DepartmentManyRelationFilter
  responses: ResponseManyRelationFilter
}

input DepartmentManyRelationFilter {
  every: DepartmentWhereInput
  some: DepartmentWhereInput
  none: DepartmentWhereInput
}

input JobOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  publishedDate: OrderDirection
}

input JobUpdateInput {
  title: String
  description: String
  publishedDate: DateTime
  user: UserRelateToOneForUpdateInput
  contractor: UserRelateToOneForUpdateInput
  departments: DepartmentRelateToManyForUpdateInput
  responses: ResponseRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input DepartmentRelateToManyForUpdateInput {
  disconnect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  create: [DepartmentCreateInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input JobUpdateArgs {
  where: JobWhereUniqueInput!
  data: JobUpdateInput!
}

input JobCreateInput {
  title: String
  description: String
  publishedDate: DateTime
  user: UserRelateToOneForCreateInput
  contractor: UserRelateToOneForCreateInput
  departments: DepartmentRelateToManyForCreateInput
  responses: ResponseRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input DepartmentRelateToManyForCreateInput {
  create: [DepartmentCreateInput!]
  connect: [DepartmentWhereUniqueInput!]
}

type Response {
  id: ID!
  description: String
  publishedDate: DateTime
  user: User
  job: Job
}

input ResponseWhereUniqueInput {
  id: ID
}

input ResponseWhereInput {
  AND: [ResponseWhereInput!]
  OR: [ResponseWhereInput!]
  NOT: [ResponseWhereInput!]
  id: IDFilter
  description: StringFilter
  publishedDate: DateTimeNullableFilter
  user: UserWhereInput
  job: JobWhereInput
}

input ResponseOrderByInput {
  id: OrderDirection
  description: OrderDirection
  publishedDate: OrderDirection
}

input ResponseUpdateInput {
  description: String
  publishedDate: DateTime
  user: UserRelateToOneForUpdateInput
  job: JobRelateToOneForUpdateInput
}

input JobRelateToOneForUpdateInput {
  create: JobCreateInput
  connect: JobWhereUniqueInput
  disconnect: Boolean
}

input ResponseUpdateArgs {
  where: ResponseWhereUniqueInput!
  data: ResponseUpdateInput!
}

input ResponseCreateInput {
  description: String
  publishedDate: DateTime
  user: UserRelateToOneForCreateInput
  job: JobRelateToOneForCreateInput
}

input JobRelateToOneForCreateInput {
  create: JobCreateInput
  connect: JobWhereUniqueInput
}

type Specialist {
  id: ID!
  title: String
  about: String
  user: User
  departments(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  departmentsCount(where: DepartmentWhereInput! = {}): Int
}

input SpecialistWhereUniqueInput {
  id: ID
}

input SpecialistWhereInput {
  AND: [SpecialistWhereInput!]
  OR: [SpecialistWhereInput!]
  NOT: [SpecialistWhereInput!]
  id: IDFilter
  title: StringFilter
  about: StringFilter
  user: UserWhereInput
  departments: DepartmentManyRelationFilter
}

input SpecialistOrderByInput {
  id: OrderDirection
  title: OrderDirection
  about: OrderDirection
}

input SpecialistUpdateInput {
  title: String
  about: String
  user: UserRelateToOneForUpdateInput
  departments: DepartmentRelateToManyForUpdateInput
}

input SpecialistUpdateArgs {
  where: SpecialistWhereUniqueInput!
  data: SpecialistUpdateInput!
}

input SpecialistCreateInput {
  title: String
  about: String
  user: UserRelateToOneForCreateInput
  departments: DepartmentRelateToManyForCreateInput
}

type Department {
  id: ID!
  name: String
  specialists(
    where: SpecialistWhereInput! = {}
    orderBy: [SpecialistOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialist!]
  specialistsCount(where: SpecialistWhereInput! = {}): Int
  jobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
}

input DepartmentWhereUniqueInput {
  id: ID
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
  id: IDFilter
  name: StringFilter
  specialists: SpecialistManyRelationFilter
  jobs: JobManyRelationFilter
}

input SpecialistManyRelationFilter {
  every: SpecialistWhereInput
  some: SpecialistWhereInput
  none: SpecialistWhereInput
}

input DepartmentOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input DepartmentUpdateInput {
  name: String
  specialists: SpecialistRelateToManyForUpdateInput
  jobs: JobRelateToManyForUpdateInput
}

input SpecialistRelateToManyForUpdateInput {
  disconnect: [SpecialistWhereUniqueInput!]
  set: [SpecialistWhereUniqueInput!]
  create: [SpecialistCreateInput!]
  connect: [SpecialistWhereUniqueInput!]
}

input DepartmentUpdateArgs {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateInput!
}

input DepartmentCreateInput {
  name: String
  specialists: SpecialistRelateToManyForCreateInput
  jobs: JobRelateToManyForCreateInput
}

input SpecialistRelateToManyForCreateInput {
  create: [SpecialistCreateInput!]
  connect: [SpecialistWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createJob(data: JobCreateInput!): Job
  createJobs(data: [JobCreateInput!]!): [Job]
  updateJob(where: JobWhereUniqueInput!, data: JobUpdateInput!): Job
  updateJobs(data: [JobUpdateArgs!]!): [Job]
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteJobs(where: [JobWhereUniqueInput!]!): [Job]
  createResponse(data: ResponseCreateInput!): Response
  createResponses(data: [ResponseCreateInput!]!): [Response]
  updateResponse(
    where: ResponseWhereUniqueInput!
    data: ResponseUpdateInput!
  ): Response
  updateResponses(data: [ResponseUpdateArgs!]!): [Response]
  deleteResponse(where: ResponseWhereUniqueInput!): Response
  deleteResponses(where: [ResponseWhereUniqueInput!]!): [Response]
  createSpecialist(data: SpecialistCreateInput!): Specialist
  createSpecialists(data: [SpecialistCreateInput!]!): [Specialist]
  updateSpecialist(
    where: SpecialistWhereUniqueInput!
    data: SpecialistUpdateInput!
  ): Specialist
  updateSpecialists(data: [SpecialistUpdateArgs!]!): [Specialist]
  deleteSpecialist(where: SpecialistWhereUniqueInput!): Specialist
  deleteSpecialists(where: [SpecialistWhereUniqueInput!]!): [Specialist]
  createDepartment(data: DepartmentCreateInput!): Department
  createDepartments(data: [DepartmentCreateInput!]!): [Department]
  updateDepartment(
    where: DepartmentWhereUniqueInput!
    data: DepartmentUpdateInput!
  ): Department
  updateDepartments(data: [DepartmentUpdateArgs!]!): [Department]
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteDepartments(where: [DepartmentWhereUniqueInput!]!): [Department]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  jobs(
    where: JobWhereInput! = {}
    orderBy: [JobOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Job!]
  job(where: JobWhereUniqueInput!): Job
  jobsCount(where: JobWhereInput! = {}): Int
  responses(
    where: ResponseWhereInput! = {}
    orderBy: [ResponseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Response!]
  response(where: ResponseWhereUniqueInput!): Response
  responsesCount(where: ResponseWhereInput! = {}): Int
  specialists(
    where: SpecialistWhereInput! = {}
    orderBy: [SpecialistOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Specialist!]
  specialist(where: SpecialistWhereUniqueInput!): Specialist
  specialistsCount(where: SpecialistWhereInput! = {}): Int
  departments(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  department(where: DepartmentWhereUniqueInput!): Department
  departmentsCount(where: DepartmentWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
