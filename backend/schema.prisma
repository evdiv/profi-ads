// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      Int         @id @default(autoincrement())
  name                    String      @default("")
  email                   String      @unique @default("")
  admin                   Boolean     @default(false)
  password                String
  publishedDate           DateTime?
  posts                   Post[]      @relation("Post_author")
  occupation              Specialist? @relation("Specialist_user")
  jobs                    Job[]       @relation("Job_user")
  responses               Response[]  @relation("Response_user")
  completedOrders         Job[]       @relation("Job_contractor")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
}

model Job {
  id            Int          @id @default(autoincrement())
  title         String       @default("")
  description   String       @default("")
  publishedDate DateTime?
  user          User?        @relation("Job_user", fields: [userId], references: [id])
  userId        Int?         @map("user")
  contractor    User?        @relation("Job_contractor", fields: [contractorId], references: [id])
  contractorId  Int?         @map("contractor")
  departments   Department[] @relation("Department_jobs")
  responses     Response[]   @relation("Response_job")

  @@index([userId])
  @@index([contractorId])
}

model Response {
  id            Int       @id @default(autoincrement())
  description   String    @default("")
  publishedDate DateTime?
  user          User?     @relation("Response_user", fields: [userId], references: [id])
  userId        Int?      @map("user")
  job           Job?      @relation("Response_job", fields: [jobId], references: [id])
  jobId         Int?      @map("job")

  @@index([userId])
  @@index([jobId])
}

model Specialist {
  id          Int          @id @default(autoincrement())
  title       String       @default("")
  about       String       @default("")
  user        User?        @relation("Specialist_user", fields: [userId], references: [id])
  userId      Int?         @unique @map("user")
  departments Department[] @relation("Department_specialists")
}

model Department {
  id          Int          @id @default(autoincrement())
  name        String       @default("")
  specialists Specialist[] @relation("Department_specialists")
  jobs        Job[]        @relation("Department_jobs")
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String    @default("")
  status      String?   @default("draft")
  content     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    Int?      @map("author")
  tags        Tag[]     @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @default("")
  posts Post[] @relation("Post_tags")
}